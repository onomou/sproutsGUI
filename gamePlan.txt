Circuit scan region

Leftmost point = x0
Rightmost point = x1
Highest point = y0
Lowest point = y1

For x from x0 to x1 step
	Draw line from (x,y0) to (x,y1)
		If intersects current curve (or another curve bounding the region)
			Flip state
		If state is active (inside the region)
			If intersects another node (node then inside region)
				Add node to list (find associated graph)

Find region boundary (right-hand rule)
Start at a point
Pick a direction
	Get incident vectors of point (for Bezier, vector from endpoint to its control point)
	Compute angle between each incident vector and the chosen direction (try dot product : (v dot u)/(norm(v)norm(u)) = cos t)
	Pick smallest angle left of incident vector
	Choose the line that has that angle scalar vector control point (please, for pity's sake, revise this sentence)
	Do it all again until returning to start point

------------------------------------------------------------------------------------------------------------------------------

Choose two nodes
Region test
	If fail: give error and exit
Line segment test
	If pass: goto reroute algorithm
Straight line node test
	If pass: draw line and end algorithm
Split line at failure and route around node
Repeat steps 2-4 on the two new lines

:::::::::::::::::::::::::::::::::::::::::::

Region Test
	If two nodes are part of the same region, pass. Otherwise, fail.

Line Segment Test
	If two line segments intersect, pass. Otherwise, fail.

Straight line node test
	If the straight line between two nodes does come within r distance of any other node, fail. Otherwise, pass.

Route
	Split the line into two lines having endpoints of the original line's start and end points, and sharing a commend endpoint of (n1+rcos(t),n2+rcos(t)), where t is the angle between the original line and the x-axis and r is a constant stored with the node.
	Then decrement r by some value.
	
--------------------------------------------
              New algorithm
--------------------------------------------

